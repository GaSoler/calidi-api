generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String?
  phone     String   @unique
  email     String?  @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  roles UserRole[]
  otps  OTP[]

  customerAppointments Appointment[] @relation("Customer")
  barberAppointments   Appointment[] @relation("Barber")

  barberAvailability BarberAvailability[]

  @@map("users")
}

model Role {
  id    String     @id @default(uuid())
  name  String     @unique
  users UserRole[]

  @@map("roles")
}

model UserRole {
  id     String @id @default(uuid())
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])
  roleId String @map("role_id")
  role   Role   @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
  @@map("user_roles")
}

model OTP {
  id        String   @id @default(uuid())
  code      String
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("otps")
}

model Service {
  id        String   @id @default(uuid())
  name      String   @unique
  duration  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  appointments Appointment[]

  @@map("services")
}

enum Weekday {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model BarberAvailability {
  id        String  @id @default(uuid())
  barberId  String  @map("barber_id")
  barber    User    @relation(fields: [barberId], references: [id])
  weekday   Weekday
  startTime String  @map("start_time")
  endTime   String  @map("end_time")

  @@map("barber_availabilities")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  DONE
}

enum CancelReason {
  CUSTOMER_NO_SHOW
  BARBER_CANCELLED
  CUSTOMER_CANCELLED
  WEATHER_OR_EMERGENCY
  OTHER
}

model Appointment {
  id              String            @id @default(uuid())
  customerId      String            @map("customer_id")
  customer        User              @relation("Customer", fields: [customerId], references: [id])
  barberId        String            @map("barber_id")
  barber          User              @relation("Barber", fields: [barberId], references: [id])
  serviceId       String            @map("service_id")
  service         Service           @relation(fields: [serviceId], references: [id])
  status          AppointmentStatus @map("status")
  appointmentDate DateTime          @map("appointment_date")
  notes           String?
  canceledReason  CancelReason?     @map("canceled_reason")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @map("updated_at")

  @@map("appointments")
}
